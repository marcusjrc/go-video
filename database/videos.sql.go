// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: videos.sql

package database

import (
	"context"
)

const createEmptyVideoAndReturnId = `-- name: CreateEmptyVideoAndReturnId :one
INSERT INTO video (title)
VALUES ($1)
RETURNING id
`

func (q *Queries) CreateEmptyVideoAndReturnId(ctx context.Context, title string) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEmptyVideoAndReturnId, title)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getLatestVideos = `-- name: GetLatestVideos :many
SELECT id, title, video_url, created_on, status, description, view_count
FROM video
ORDER BY created_on DESC
LIMIT 30
`

func (q *Queries) GetLatestVideos(ctx context.Context) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, getLatestVideos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.VideoUrl,
			&i.CreatedOn,
			&i.Status,
			&i.Description,
			&i.ViewCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideo = `-- name: GetVideo :one
SELECT id, title, video_url, created_on, status, description, view_count
FROM video
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetVideo(ctx context.Context, id int32) (Video, error) {
	row := q.db.QueryRowContext(ctx, getVideo, id)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.VideoUrl,
		&i.CreatedOn,
		&i.Status,
		&i.Description,
		&i.ViewCount,
	)
	return i, err
}
