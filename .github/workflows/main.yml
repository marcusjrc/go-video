name: Main Workflow for Go-Video
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20.3"
      - name: Install dependencies
        run: go get .
      - name: Go fmt check
        run: test -z $(gofmt -l .)
      - name: Linting
        uses: dominikh/staticcheck-action@v1.3.0
        with:
          version: "2023.1.3"
          install-go: false
      - name: Go vet
        run: go vet ./...
      - name: Tests
        run: go test ./...
      - name: Build
        run: go build -v ./...
  deploy-prod:
    runs-on: ubuntu-latest
    environment: 'prod'
    needs: [test-and-build]
    steps:
      - uses: actions/checkout@v3
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Deploy to AWS ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BACKEND_ECR_REPOSITORY: govideo
          BACKEND_IMAGE_TAG: latest
          NGINX_ECR_REPOSITORY: nginx-reverse-proxy
          NGINX_IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$BACKEND_IMAGE_TAG .
          docker push $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$BACKEND_IMAGE_TAG
          cd infrastructure
          docker build -t $ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$NGINX_IMAGE_TAG -f NginxDockerfile .
          docker push $ECR_REGISTRY/$NGINX_ECR_REPOSITORY:$NGINX_IMAGE_TAG
          aws ecs update-service --cluster ${{secrets.CLUSTER_NAME}} --service ${{secrets.SERVICE_NAME}} --force-new-deployment --region eu-west-1
